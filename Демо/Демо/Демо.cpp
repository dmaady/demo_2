#include <iostream>
#include <windows.h>

using namespace std;

struct item //структура для описания элемента сети
{ 
	int s, c; //начальный и конечный узлы
	int v; //расстояние между узлами
};

const int m = 11; //количество путей по графу

struct item map[m] = //все пути, нумерация узлов с нуля
{ 

	{0, 1, 2}, {0, 3, 10}, {0, 2, 4},
	{1, 4, 5}, {1, 3, 11},
	{2, 3, 3}, {2, 5, 1},
	{3, 4, 8}, {3, 5, 7},
	{4, 6, 6},
	{5, 6, 9}
};

const int n = 7; //количество вершин графа
int road[n]; //номера узлов текущего пути
bool incl[n]; //true, если i-ая вершина включена в путь
int way[n]; //искомый самый короткий путь
int waylen; //длина искомого короткого пути
int start, finish; //начальная и конечная вершины
bool found;
int len; //найденное расстояние между узлами в маршруте
int c_len; //текущее расстояние между узлами в маршруте

int find(int s, int c) //расстояние между узлами из s и c или 0, если пути нет
{ 

	for (int i = 0; i < m; i++)
		if (map[i].s == s && map[i].c == c ||
			map[i].s == c && map[i].c == s) return map[i].v;

	return 0;
}

void step(int s, int f, int p) //рекурсивный цикл для поиска шага пути
{ 
	int c; //номер вершины, куда делается шаг

	if (s == f) //путь найден
	{ 
		found = true; //поставить флажок "найдено"
		len = c_len; //запомнить общее расстояние между узлами
		waylen = p; //запомнить длину пути (количество узлов)

		for (int i = 0; i < waylen; i++) way[i] = road[i]; //запомнить путь

	}

	else //выбор очередной точки
	{ 
		for (c = 0; c < n; c++) //проверка всех вершины
		{ 
			int w = find(s, c); //есть ли путь из s в c

			if (w && !incl[c] && (len == 0 || c_len + w < len)) //нужная точка не включена?
			{ 
				road[p] = c; //включить точку в путь
				incl[c] = true; //пометить как включенную
				c_len += w; //учесть в общем расстоянии пути
				step(c, f, p + 1); //вызвать себя для поиска следующей точки
				road[p] = 0; //вернуть всё как было
				incl[c] = false;
				c_len -= w;
			}
		}
	}
}

int main() 
{
	setlocale(0, "");

	for (int i = 0; i < n; i++) //инициализация данных
	{
		road[i] = way[i] = 0; incl[i] = false;
	}

	len = c_len = waylen = 0;
	start = 0; //начало пути - нумерация с 0
	finish = 6; //конец пути - нумерация с 0
	road[0] = start; //первую точку внести в маршрут
	incl[start] = true; //и пометить как включённую
	found = false; //но путь пока не найден

	step(start, finish, 1); //поиск второй точки

	if (found) 
	{
		cout << "Найденный путь: ";
		for (int i = 0; i < waylen; i++) cout << " " << way[i]+1;
		cout << ", расстояние между узлами: " << len<< "\n";
	}

	else cout << "Путь не найден!";
	cout << endl;

	system("pause");
	return 0;
}